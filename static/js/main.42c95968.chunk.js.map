{"version":3,"sources":["components/searchInput/searchInput.js","components/searchResults/searchResults.js","components/googleMap/googleMap.js","components/search/search.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","handleInputChange","_this","props","searchByCity","search","value","_this2","this","react_default","a","createElement","className","placeholder","ref","input","onClick","Component","SearchResults","buildTableHeaders","columns","map","columnName","buildTableBody","dataColumns","row","GoogleMap","dist","google","style","width","height","marginLeft","marginRight","marginTop","border","zoom","center","lat","lng","lon","position","defaultProps","GoogleApiWrapper","apiKey","Search","state","dataWeather","undefined","coord","lastResults","Array","getQuery","city","fetch","then","response","json","cloneLastResults","shift","find","k","push","setState","main","buildDataColumn","data","humidity","pressure","temp_max","temp_min","buildHeadersColumn","removeLastResult","index","splice","renderLastResults","lastResult","buildSearchResultsBlock","searchResults_searchResults","googleMap","searchInput_searchInput","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42c95968.chunk.js","sourcesContent":["import React, { Component } from 'react'\n//@styles\nimport './searchInput.css';\n\nclass SearchInput extends Component {\n\n handleInputChange = () => {\n    this.props.searchByCity(this.search.value);\n }\n\n render() {\n   return (\n     <form className=\"searchInput-form\">\n       <input\n         className=\"searchInput-input\"\n         placeholder=\"Enter a city...\"\n         ref={input => this.search = input}\n       />\n       <div onClick={this.handleInputChange} className=\"searchInput-btn\">Search</div>\n     </form>\n   )\n }\n}\n\nexport default SearchInput;","import React, { Component } from 'react'\nimport './searchResults.css'\n\nclass SearchResults extends Component {\n\n    buildTableHeaders = (columns) => {\n        return (\n            <thead>\n                <tr>\n                    {columns.map(function(columnName){\n                        return <th>{columnName}</th>;\n                    })}\n                </tr>\n            </thead>\n        );\n    }\n\n    buildTableBody = ( dataColumns ) => {\n        return (\n            dataColumns.map(function(row){\n                return <td>{row}</td>;\n                })\n        );\n    }\n\n    render() {\n    return (\n            <table className=\"searchResults-table\">\n                {this.buildTableHeaders(this.props.columns)}\n                {this.buildTableBody(this.props.dataColumns)}\n            </table>\n    )\n    }\n}\n\nexport default SearchResults;","import React, { Component } from 'react';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\n\nclass GoogleMap extends Component {\n  static defaultProps = {\n    center: {\n      lat: 59.95,\n      lng: 30.33\n    },\n    zoom: 11\n  };\n\n  render() {\n    return (\n      <div className=\"map-container\">\n        <Map google={this.props.google}\n                 style={{width: '80%', height:'80%',marginLeft: 'auto',marginRight: 'auto',marginTop:'15px',border:'2px solid #333333'}}\n                 zoom={14}\n                 center={{\n                  lat: this.props.lat,\n                  lng: this.props.lon\n                }}>\n                <Marker\n                    position={{lat: this.props.lat, lng: this.props.lon}} />\n            </Map>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyC1E_8gldva1_W1yspH1v_i983i70_EcFU')\n})(GoogleMap)","import React, { Component } from 'react'\nimport SearchInput from '../searchInput/searchInput'\nimport SearchResults from '../searchResults/searchResults'\nimport GoogleMap from '../googleMap/googleMap'\n\nclass Search extends Component {\n\n    state = {\n        dataWeather: undefined,\n        coord:{ \n            lon: -58.3712,\n            lat: -34.6083\n        },\n        lastResults:new Array()\n    }\n\n\n\n    getQuery = ( city) => {\n        if (city){\n            fetch('https://api.openweathermap.org/data/2.5/weather?q='+city+'&APPID=503ce137a722c9fccc9c9104964b0132')\n            .then((response) => {\n                return response.json()\n            })\n            .then((response) => {\n                //Logic for mantain the last 5 results\n                let cloneLastResults = this.state.lastResults;\n                if (typeof cloneLastResults[4] !== 'undefined'){\n                    cloneLastResults.shift();\n                }\n                if (!cloneLastResults.find(k => k === city)){\n                    cloneLastResults.push(city);\n                }\n                //End logic\n                this.setState({ \n                    dataWeather: response.main,\n                    coord: response.coord,\n                    lastResults: cloneLastResults\n                })\n            });\n        }\n    }\n\n    buildDataColumn = () => {\n        let data = new Array(5);\n        if (this.state.dataWeather){\n            data.push(this.state.dataWeather.humidity);\n            data.push(this.state.dataWeather.pressure);\n            data.push(this.state.dataWeather.humidity);\n            data.push(this.state.dataWeather.temp_max);\n            data.push(this.state.dataWeather.temp_min);\n        }\n        return data;\n    }\n\n    buildHeadersColumn = () => {\n        let columns = new Array(5);\n        columns.push('Temperature');\n        columns.push('Pressure');\n        columns.push('Humidity');\n        columns.push('Max Temperature');\n        columns.push('Min Temperature');\n        return columns;\n    }\n\n    removeLastResult = (index) => {\n        let cloneLastResults = this.state.lastResults;\n        cloneLastResults.splice(index,1);\n        this.setState({\n            lastResults: cloneLastResults\n        });\n    }\n\n    renderLastResults = (lastResult,index) => {\n        return (  \n            <div className=\"btn pill\">\n                {lastResult} \n                <div className=\"spinner-img\" onClick={ () => this.getQuery(lastResult)}></div>\n                <div className=\"cross-img\" onClick={() => this.removeLastResult(index)}></div>\n            </div>\n        );\n    }\n\n    buildSearchResultsBlock = () => {\n        return (\n            <div>\n                <SearchResults columns={this.buildHeadersColumn()} dataColumns={this.buildDataColumn()} />\n                <GoogleMap \n                    lat={this.state.coord.lat}\n                    lon={this.state.coord.lon}\n                />\n            </div>\n        )\n    }\n\n    render() {\n    return (\n        <div>\n        <SearchInput searchByCity={this.getQuery} />\n        <div>\n            {this.state.lastResults.map(this.renderLastResults,this)}\n        </div>\n            { this.state.dataWeather ? this.buildSearchResultsBlock() : null }\n        </div>\n    )\n    }\n}\n\nexport default Search;","import React, { Component } from 'react';\nimport './App.css';\nimport Search from './components/search/search'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Weather App</h1>\n        </header>\n        <Search />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}